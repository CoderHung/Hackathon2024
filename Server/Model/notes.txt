There are two ways we can go about building a recondmendation system, colabrative filtering and content based recondmendation 
Colabrative filtering is not feasible because we dont have users

-> Content based recondmendation (supervised learning)
Their will be a 'base' user profile used for new users, then the user's profile will change as they interact with the system
    +,Popular Movies Profile:
        Create a profile based on the top-rated or most popular movies in your dataset.
        This profile can be used as a starting point for new users.

we'll need to build an item profile(for movies it's a list of its attributes)

from the item profile, we'll infer the user's profile
    +,a simple way of doing this is just to take an weighted average of all the item profiles which the user has interacted with
    +there are explicit and implicit ways in which a user can change their user profile(view and buy)

we can think of item features as vectors, user profile is also a vector, it's a n amalgamation of the items they have interaced with

making predictions based on the user profile
    +,do math to calculate the difference betwwen the user profile and item profile(both of which are just vectors in high dimensional space)

Pros and cons of content based recondmendation:
Pros:
    +,no need for other user's data
    +,works well for users with niche tastes
    +,able to recondmend new and unpopular items(the rating of the item wouldnt matter as much as the features themselves)
    +,clear cut explaination available for model recondmendation behavouir
Cons:
    +,Finding the appropriate feature for items is hard and requires serious consideration
    +,prone to overspecialization, the user doesn't get the see items outside their user profile
    +,have to figure out how to build a user profile for new users

limitation of our project:
    +, lack of user data
    +, have to build a base user profile(which is probably a user porfile that has no preference, represents a new unknown user)
implement popularity and ratings check (check)



ideas to implement if have time:
    +,dont recondmend to users what they have already seen
    +,give the user some choices when creating an account of movies they like or dislike, then build the user porfile from that(probably not since we dont have time to implement it on both front and back end)
    +,use some of the user's given data(like age and gender) to influence recondmendation somehow(probably not, since thats collabrative filltering or content based recommendation if we had relevent data but we dont)
    +,using movielens we can get the rating and user that have rated movies(we dont have time to implement ratings)
    +,create a new TF IDF vector everytime a new movie gets added(we'll wont implement an add movie function so this wont be a thing)


1.create and save tf-idf matrix
2.create new user profile and save cosine matrix(using tf-idf matrix)
3.use cosine matrix to get recommendations
4.change cosine matrix when user profile is changed

change the recommendation and tf - idf count vectorizer matrix consideration
    +,recommendation has to take into account the popularity,rating and if the user has bought a movie or not
check if the user has bought a movie and dont recommend him that movie

create user profile(check)
logic for user's profile creation:
    +,new user's gets a default user profile
    +,when they interact with the website change their user profile somehow to fit their tastes more

docker stop $(docker ps -q)
docker compose up -d --build
docker logs dev_postgres

pip install surprise

need to do list:
    +,save user profile to database(we'll just save it as a file)
    +,change the user profile when interacts with website(check for actions ['view','buy'])
    +,add cast and crew to algorithm(will do if have time)
    +,how often should we refit the vectorizer(this might not be in the scope of our project given that we're not adding any new movies)

data = pd.read_csv('recommend/data.csv')
create_and_save_tfidf_matrix_v1()
create_and_save_user_profile(1, 'v1')
calculate_and_save_similarity_matrix(1,'v1')
print(data.iloc[get_recommendations(1)]['original_title'])
update_user_and_similarity_matrix(1,'The Dark Knight Rises','buy','v1')
print(data.iloc[get_recommendations(1)]['original_title'])


create_and_save_tfidf_matrix_v1()
create_and_save_user_profile(1, 'v1')
calculate_and_save_similarity_matrix(1,'v1')
print(get_recommendations(1))
update_user_and_similarity_matrix(1,'The Dark Knight Rises','buy','v1')
print(get_recommendations(1))

